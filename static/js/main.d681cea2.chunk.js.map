{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","fileReader","useState","hasFile","setHasFile","columns","setColumns","data","setData","useEffect","store","has","setupTableData","fileData","get","columnsSet","Set","add","dataArray","segments","forEach","segment","idx","inf","Object","keys","i","push","sort","url","delete","columnsArray","c","title","field","render","rowData","src","tvgLogo","style","width","readFile","e","content","result","reader","M3U8FileParser","read","getResult","className","onChange","console","log","FileReader","onloadend","readAsText","acceptedFiles","filesLimit","dropzoneText","useChipsForPreview","options","padding","pageSize","draggable","pageSizeOptions","detailPanel","duration","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","Boolean","window","location","hostname","match","ReactDOM","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUA4JeA,EArJH,WACR,IAAIC,EADU,EAGgBC,oBAAS,GAHzB,mBAGPC,EAHO,KAGEC,EAHF,OAKgBF,mBAAS,MALzB,mBAKPG,EALO,KAKEC,EALF,OAMUJ,mBAAS,MANnB,mBAMPK,EANO,KAMDC,EANC,KAQdC,qBAAU,WACFC,IAAMC,IAAI,iBACVP,GAAW,GACXQ,OAEL,IAEH,IAAMA,EAAiB,WACnB,IAAMC,EAAWH,IAAMI,IAAI,eACrBC,EAAa,IAAIC,IACvBD,EAAWE,IAAI,QACf,IAAMC,EAAY,GAElBL,EAASM,SAASC,SAAQ,SAACC,EAASC,GAC5BD,EAAQE,KACRC,OAAOC,KAAKJ,EAAQE,KAAKH,SAAQ,SAACM,GAC9BX,EAAWE,IAAIS,MAGvBR,EAAUS,KAAV,aACIC,KAAMN,EACNO,IAAKR,EAAQQ,KACVR,EAAQE,SAGnBR,EAAWe,OAAO,YAClB,IAAMC,EAAe,GACrBhB,EAAWK,SAAQ,SAACY,GACN,YAANA,EACAD,EAAaJ,KAAK,CACdM,MAAOD,EACPE,MAAOF,EACPG,OAAQ,SAAAC,GAAO,OAAI,yBAAKC,IAAKD,EAAQE,QAASC,MAAO,CAACC,MAAO,SAGjET,EAAaJ,KAAK,CACdM,MAAOD,EACPE,MAAOF,OAKnB1B,EAAWyB,GACXvB,EAAQU,IAGNuB,EAAW,SAACC,GACd,IAAMC,EAAU1C,EAAW2C,OACrBC,EAAS,IAAIC,IACnBD,EAAOE,KAAKJ,GACZ,IAAMC,EAASC,EAAOG,YAClBJ,IACAlC,IAAM,cAAekC,GACrBxC,GAAW,GACXQ,MAWR,OACI,yBAAKqC,UAAU,OACX,4BAAQA,UAAU,eACZ9C,GAAW,kBAAC,IAAD,CACT+C,SAXA,SAACR,GACbS,QAAQC,IAAIV,IACZzC,EAAa,IAAIoD,YACNC,UAAYb,EACvBxC,EAAWsD,WAAWb,EAAE,KAQZc,cAAe,CAAC,kBAAmB,iBACnCC,WAAY,EACZC,aAAa,8CACbC,oBAAoB,KAG5B,8BACKtD,GAAWE,GAAQ,kBAAC,IAAD,CAChB0B,MAAM,WACN5B,QAASA,EACTE,KAAMA,EACNqD,QAAS,CACLC,QAAS,QACTC,SAAU,IACVC,WAAW,EACXC,gBAAiB,CAAC,GAAI,GAAI,GAAI,GAAI,MAEtCC,YAAa,SAAA7B,GACT,OACI,oCACI,mCAASA,EAAQP,KACjB,wCAAcO,EAAQ8B,YAIlCC,SAAU,CACNC,SAAU,SAAAC,GAAO,OACb,IAAIC,SAAQ,SAACC,EAASC,GAClBC,YAAW,WAMPF,MACD,SAEXG,YAAa,SAACL,EAASM,GAAV,OACT,IAAIL,SAAQ,SAACC,EAASC,GAClBC,YAAW,WAOPF,MACD,SAEXK,YAAa,SAAAD,GAAO,OAChB,IAAIL,SAAQ,SAACC,EAASC,GAClBC,YAAW,WAEHtB,QAAQC,IAAIuB,EAAQ/C,MAQxB2C,MACD,eCvIfM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCXNC,IAAS/C,OACL,kBAAC,IAAMgD,WAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.d681cea2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { DropzoneArea } from 'material-ui-dropzone'\nimport M3U8FileParser from 'm3u8-file-parser'\nimport store from 'store2'\nimport MaterialTable from 'material-table'\n\nconst App = () => {\n    let fileReader\n\n    const [hasFile, setHasFile] = useState(false)\n\n    const [columns, setColumns] = useState(null)\n    const [data, setData] = useState(null)\n\n    useEffect(() => {\n        if (store.has('m3uOriginal')) {\n            setHasFile(true)\n            setupTableData()\n        }\n    }, [])\n\n    const setupTableData = () => {\n        const fileData = store.get('m3uOriginal')\n        const columnsSet = new Set()\n        columnsSet.add('sort')\n        const dataArray = []\n        // console.log(flatten(m3uContent.segments))\n        fileData.segments.forEach((segment, idx) => {\n            if (segment.inf) {\n                Object.keys(segment.inf).forEach((i) => {\n                    columnsSet.add(i)\n                })\n            }\n            dataArray.push({\n                sort: idx,\n                url: segment.url,\n                ...segment.inf\n            })\n        })\n        columnsSet.delete('duration')\n        const columnsArray = []\n        columnsSet.forEach((c) => {\n            if (c === 'tvgLogo') {\n                columnsArray.push({\n                    title: c,\n                    field: c,\n                    render: rowData => <img src={rowData.tvgLogo} style={{width: 70}}/>\n                })\n            } else {\n                columnsArray.push({\n                    title: c,\n                    field: c\n                })\n            }\n\n        })\n        setColumns(columnsArray)\n        setData(dataArray)\n    }\n\n    const readFile = (e) => {\n        const content = fileReader.result\n        const reader = new M3U8FileParser()\n        reader.read(content)\n        const result = reader.getResult()\n        if (result) {\n            store('m3uOriginal', result)\n            setHasFile(true)\n            setupTableData()\n        }\n    }\n\n    const newFile = (e) => {\n        console.log(e)\n        fileReader = new FileReader()\n        fileReader.onloadend = readFile\n        fileReader.readAsText(e[0])\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {!hasFile && <DropzoneArea\n                    onChange={newFile}\n                    acceptedFiles={['audio/x-mpegurl', 'audio/mpegurl']}\n                    filesLimit={1}\n                    dropzoneText='To get started, add your playlist file here'\n                    useChipsForPreview={true}\n                />}\n            </header>\n            <main>\n                {columns && data && <MaterialTable\n                    title='Playlist'\n                    columns={columns}\n                    data={data}\n                    options={{\n                        padding: 'dense',\n                        pageSize: 100,\n                        draggable: false,\n                        pageSizeOptions: [20, 40, 60, 80, 100]\n                    }}\n                    detailPanel={rowData => {\n                        return (\n                            <>\n                                <p>URL: {rowData.url}</p>\n                                <p>Duration: {rowData.duration}</p>\n                            </>\n                        )\n                    }}\n                    editable={{\n                        onRowAdd: newData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    {\n                                        // const data = this.state.data;\n                                        // data.push(newData);\n                                        // this.setState({ data }, () => resolve());\n                                    }\n                                    resolve()\n                                }, 1000)\n                            }),\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    {\n                                        // const data = this.state.data;\n                                        // const index = data.indexOf(oldData);\n                                        // data[index] = newData;\n                                        // this.setState({ data }, () => resolve());\n                                    }\n                                    resolve()\n                                }, 1000)\n                            }),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    {\n                                        console.log(oldData.sort)\n                                        const newData = data\n\n                                        // const index = data.indexOf(oldData);\n                                        // data.splice(index, 1);\n                                        // setData({ data });\n                                        // resolve()\n                                    }\n                                    resolve()\n                                }, 100)\n                            }),\n                    }}\n                />}\n            </main>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline/>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}