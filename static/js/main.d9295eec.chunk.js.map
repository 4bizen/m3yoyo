{"version":3,"sources":["LocalStore.js","LogoAutocomplete.js","styles.js","M3U.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["m3uFilenameState","createPersistedState","m3uOriginalState","m3uDataState","renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","backgroundColor","Provider","value","height","map","reduce","a","b","width","key","outerElementType","innerElementType","overscanCount","LogoAutocomplete","Autocomplete","onChange","e","v","freeSolo","id","disableClearable","disableListWrap","autoSelect","options","logos","option","url","renderOption","src","renderInput","params","TextField","label","variant","inputProps","autoComplete","useStyles","makeStyles","root","display","M3U","fileReader","classes","tableRef","useRef","m3uFilename","setM3uFilename","m3uOriginal","setM3uOriginal","m3uData","setM3uData","useState","columns","setColumns","Math","random","refreshKey","setRefreshKey","resolve","workaround","setWorkaround","confirmOpen","setConfirmOpen","handleConfirmClose","readFile","content","result","reader","M3U8FileParser","read","getResult","useEffect","setupTableColumns","setupTableData","columnsSet","Set","add","segments","forEach","segment","idx","inf","Object","keys","i","delete","columnsArray","c","push","title","field","defaultSort","render","rowData","tvgLogo","editComponent","dataArray","sort","enabled","rows","reSortData","d","Container","className","Box","maxWidth","ml","mr","mt","FileReader","onloadend","readAsText","name","acceptedFiles","filesLimit","dropzoneText","useChipsForPreview","padding","pageSize","draggable","pageSizeOptions","exportButton","exportCsv","row","duration","tableData","string","str","p","hasOwnProperty","replace","toLowerCase","rowToString","dataType","fileName","window","navigator","msSaveOrOpenBlob","blob","Blob","encodedData","encodeURIComponent","link","document","createElement","setAttribute","body","appendChild","click","exportFile","filtering","search","selection","sorting","actions","tooltip","icon","onClick","evt","indexOf","splice","arrayMove","current","onAllSelected","isFreeAction","event","localization","toolbar","exportName","detailPanel","editable","isEditable","isDeletable","onRowAdd","newData","Promise","reject","onRowUpdate","oldData","parseInt","onRowDelete","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","autoFocus","TabPanel","Typography","component","role","hidden","App","setValue","AppBar","position","Tabs","newValue","aria-label","Tab","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createMuiTheme","palette","primary","main","secondary","ReactDOM","StrictMode","CssBaseline","ThemeProvider","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d9295eec.chunk.js","sourcesContent":["import createPersistedState from 'use-persisted-state'\n\nexport const m3uFilenameState = createPersistedState('m3uFilename')\nexport const m3uOriginalState = createPersistedState('m3uOriginal')\nexport const m3uDataState = createPersistedState('m3uData')\n","import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport logos from './tvlogos.json'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport { useTheme } from '@material-ui/core/styles'\nimport { VariableSizeList } from 'react-window'\n\nconst LISTBOX_PADDING = 8 // px\n\nfunction renderRow(props) {\n    const { data, index, style } = props\n    return React.cloneElement(data[index], {\n        style: {\n            ...style,\n            top: style.top + LISTBOX_PADDING\n        }\n    })\n}\n\nconst OuterElementContext = React.createContext({})\n\nconst OuterElementType = React.forwardRef((props, ref) => {\n    const outerProps = React.useContext(OuterElementContext)\n    return <div ref={ref} {...props} {...outerProps} />\n})\n\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n    const { children, ...other } = props\n    const itemData = React.Children.toArray(children)\n    const theme = useTheme()\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true })\n    const itemCount = itemData.length\n    const itemSize = smUp ? 50 : 60\n\n    const getChildSize = (child) => {\n        if (React.isValidElement(child) && child.type === ListSubheader) {\n            return 48\n        }\n\n        return itemSize\n    }\n\n    const getHeight = () => {\n        if (itemCount > 8) {\n            return 8 * itemSize\n        }\n        return itemData.map(getChildSize).reduce((a, b) => a + b, 0)\n    }\n\n    return (\n        <div ref={ref} style={{backgroundColor: '#3d3d3d'}}>\n            <OuterElementContext.Provider value={other}>\n                <VariableSizeList\n                    itemData={itemData}\n                    height={getHeight() + 2 * LISTBOX_PADDING}\n                    width=\"100%\"\n                    key={itemCount}\n                    outerElementType={OuterElementType}\n                    innerElementType=\"ul\"\n                    itemSize={(index) => getChildSize(itemData[index])}\n                    overscanCount={5}\n                    itemCount={itemCount}\n                >\n                    {renderRow}\n                </VariableSizeList>\n            </OuterElementContext.Provider>\n        </div>\n    )\n})\n\nconst LogoAutocomplete = (props) => {\n    return (\n        <Autocomplete\n            value={props.value}\n            onChange={(e,v) => {props.onChange(v)}}\n            freeSolo\n            id=\"logo-select\"\n            disableClearable\n            disableListWrap\n            autoSelect\n            ListboxComponent={ListboxComponent}\n            options={logos.map((option) => option.url)}\n            renderOption={(option) => <img src={option} style={{ width: 70 }}/>}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Choose a logo\"\n                    variant=\"outlined\"\n                    inputProps={{\n                        ...params.inputProps,\n                        autoComplete: 'new-password' // disable autocomplete and autofill\n                    }}\n                />\n            )}\n        />\n    )\n}\n\nexport default LogoAutocomplete","import makeStyles from '@material-ui/core/styles/makeStyles'\n\nexport const useStyles = makeStyles({\n    root: {\n        display: 'flex'\n    }\n})","import { Box } from '@material-ui/core'\nimport { DropzoneArea } from 'material-ui-dropzone'\nimport MaterialTable from 'material-table'\nimport Container from '@material-ui/core/Container'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { m3uDataState, m3uFilenameState, m3uOriginalState } from './LocalStore'\nimport M3U8FileParser from 'm3u8-file-parser'\nimport LogoAutocomplete from './LogoAutocomplete'\nimport { useStyles } from './styles'\nimport arrayMove from 'array-move'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Button from '@material-ui/core/Button'\n\nconst M3U = (props) => {\n    const classes = useStyles()\n\n    let fileReader\n\n    const tableRef = useRef()\n\n    const [m3uFilename, setM3uFilename] = m3uFilenameState(null)\n    const [m3uOriginal, setM3uOriginal] = m3uOriginalState(null)\n    const [m3uData, setM3uData] = m3uDataState(null)\n    const [columns, setColumns] = useState(null)\n    const [refreshKey, setRefreshKey] = useState(Math.random())\n\n    // https://github.com/mbrn/material-table/issues/1325\n    const [workaround, setWorkaround] = useState({\n        data: null,\n        resolve: null\n    })\n\n    const [confirmOpen, setConfirmOpen] = useState(false)\n\n    const handleConfirmClose = () => {\n        setConfirmOpen(false)\n    }\n\n    const handleDeleteAll = () => {\n        setM3uOriginal(null)\n        setM3uData(null)\n        setColumns(null)\n        setM3uFilename(null)\n        setRefreshKey(Math.random())\n        setConfirmOpen(false)\n    }\n\n    const readFile = (e) => {\n        const content = fileReader.result\n        const reader = new M3U8FileParser()\n        reader.read(content)\n        const result = reader.getResult()\n        if (result) {\n            setM3uOriginal(result)\n        }\n    }\n\n    const newFile = (e) => {\n        fileReader = new FileReader()\n        fileReader.onloadend = readFile\n        fileReader.readAsText(e[0])\n        setM3uFilename(e[0].name)\n    }\n\n    useEffect(() => {\n        if (m3uOriginal) {\n            setupTableColumns()\n        }\n    }, [m3uOriginal])\n\n    useEffect(() => {\n        if (m3uOriginal && !m3uData) {\n            setupTableData()\n        }\n    }, [m3uOriginal, m3uData])\n\n    useEffect(() => {\n        if (workaround.data) {\n            setM3uData(workaround.data)\n            workaround.resolve()\n            setRefreshKey(Math.random())\n        }\n    }, [workaround])\n\n    const setupTableColumns = () => {\n        const columnsSet = new Set()\n        columnsSet.add('sort')\n        columnsSet.add('enabled')\n        m3uOriginal.segments.forEach((segment, idx) => {\n            if (segment.inf) {\n                Object.keys(segment.inf).forEach((i) => {\n                    columnsSet.add(i)\n                })\n            }\n        })\n        columnsSet.delete('duration')\n        const columnsArray = []\n        columnsSet.forEach((c) => {\n            if (c === 'sort') {\n                columnsArray.push({\n                    title: c,\n                    field: c,\n                    defaultSort: 'asc'\n                })\n            } else if (c === 'enabled') {\n                columnsArray.push({\n                    title: c,\n                    field: c,\n                    type: 'boolean'\n                })\n            } else if (c === 'tvgLogo') {\n                columnsArray.push({\n                    title: c,\n                    field: c,\n                    render: rowData => <img src={rowData.tvgLogo} style={{ width: 70 }}/>,\n                    editComponent: (props) => <LogoAutocomplete\n                        value={props.value}\n                        onChange={e => props.onChange(e)}\n                    />\n                })\n            } else {\n                columnsArray.push({\n                    title: c,\n                    field: c\n                })\n            }\n        })\n        setColumns(columnsArray)\n    }\n\n    const setupTableData = () => {\n        const dataArray = []\n        m3uOriginal.segments.forEach((segment, idx) => {\n            dataArray.push({\n                sort: idx + 1,\n                enabled: true,\n                url: segment.url,\n                ...segment.inf\n            })\n        })\n        setM3uData({ rows: dataArray })\n    }\n\n    const reSortData = (data) => {\n        return data.map((d, idx) => {\n            d.sort = idx + 1\n            return d\n        })\n    }\n\n    const onRowAdd = newData =>\n        new Promise((resolve, reject) => {\n            let data = m3uData.rows\n            data.push(newData)\n            data = reSortData(data)\n            setWorkaround({ data: { rows: data }, resolve: resolve })\n        })\n\n    const onRowDelete = oldData =>\n        new Promise((resolve, reject) => {\n            let data = m3uData.rows\n            const index = data.indexOf(oldData)\n            data.splice(index, 1)\n            data = reSortData(data)\n            setWorkaround({ data: { rows: data }, resolve: resolve })\n        })\n\n    const onRowUpdate = (newData, oldData) =>\n        new Promise((resolve, reject) => {\n            let data = m3uData.rows\n            const index = data.indexOf(oldData)\n            data[index] = newData\n            if (parseInt(newData.sort, 10) !== parseInt(oldData.sort, 10)) {\n                data = arrayMove(\n                    data,\n                    parseInt(oldData.sort, 10) - 1,\n                    parseInt(newData.sort, 10) - 1\n                )\n                data = reSortData(data)\n            }\n            setWorkaround({ data: { rows: data }, resolve: resolve })\n        })\n\n    const exportFile = (dataType, fileName, data) => {\n        if (window.navigator.msSaveOrOpenBlob) {\n            const blob = new Blob([data])\n            window.navigator.msSaveOrOpenBlob(blob, fileName)\n        } else {\n            const charBom = '\\uFEFF'\n            const encodedData = encodeURIComponent(data)\n            let content = `data:text/${dataType};charset=utf-8,${charBom}${encodedData}`\n\n            const link = document.createElement('a')\n            link.setAttribute('href', content)\n            link.setAttribute('download', fileName)\n            document.body.appendChild(link)\n\n            link.click()\n        }\n    }\n\n    const camelToKebab = (string) => {\n        return string.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase()\n    }\n\n    const rowToString = (row) => {\n        let str = ''\n        for (let p in row) {\n            if (row.hasOwnProperty(p)) {\n                str += ` ${camelToKebab(p)}=\"${row[p]}\"`\n            }\n        }\n        return str\n    }\n\n    const exportFunction = (columns, data) => {\n        let content = '#EXTM3U\\r\\n'\n        data.forEach(row => {\n            let title = ''\n            if (row.title) {\n                title = `,${row.title}`\n                delete row.title\n            }\n            const duration = row.duration\n            const url = row.url\n            const enabled = row.enabled ? '' : '#'\n            delete row.duration\n            delete row.enabled\n            delete row.url\n            delete row.sort\n            delete row.tableData\n\n            content += `${enabled}#EXTINF:${duration}${rowToString(row)}${title}\\r\\n${enabled}${url}\\r\\n`\n        })\n        exportFile('plain', `new_${m3uFilename}`, content)\n    }\n\n    return (\n        <>\n            <Container className={classes.root}>\n                {!m3uOriginal && (\n                    <Box maxWidth={500} ml={'auto'} mr={'auto'} mt={10}>\n                        <DropzoneArea\n                            onChange={newFile}\n                            acceptedFiles={['audio/x-mpegurl', 'audio/mpegurl']}\n                            filesLimit={1}\n                            dropzoneText='To get started, add your playlist file here'\n                            useChipsForPreview={true}/>\n                    </Box>\n                    // TODO: add a url field which gets the file\n                )}\n                {m3uData && columns && (\n                    <Box>\n                        <MaterialTable\n                            key={refreshKey}\n                            tableRef={tableRef}\n                            title={`file: ${m3uFilename}`}\n                            columns={columns}\n                            data={m3uData.rows}\n                            options={{\n                                padding: 'dense',\n                                pageSize: 60,\n                                draggable: false,\n                                pageSizeOptions: [20, 40, 60, 80, 100],\n                                exportButton: true,\n                                exportCsv: exportFunction,\n                                filtering: true,\n                                search: false,\n                                selection: true,\n                                sorting: true\n                            }}\n                            actions={[\n                                {\n                                    tooltip: 'Remove Selected',\n                                    icon: 'delete',\n                                    onClick: (evt, data) => {\n                                        let rows = m3uData.rows\n                                        data.forEach((d) => {\n                                            const index = rows.indexOf(d)\n                                            rows.splice(index, 1)\n                                        })\n                                        rows = reSortData(rows)\n                                        setWorkaround({\n                                            data: { rows: rows }, resolve: () => {\n                                            }\n                                        })\n                                    }\n                                },\n                                {\n                                    tooltip: 'Disable Selected',\n                                    icon: 'block',\n                                    onClick: (evt, data) => {\n                                        let rows = m3uData.rows\n                                        const length = rows.length\n                                        data.forEach((d) => {\n                                            const index = rows.indexOf(d)\n                                            d.enabled = false\n                                            rows[index] = d\n                                            rows = arrayMove(rows, index, length)\n                                            rows = reSortData(rows)\n                                        })\n                                        setWorkaround({\n                                            data: { rows: rows }, resolve: () => {\n                                            }\n                                        })\n                                        tableRef.current.onAllSelected(false)\n                                    }\n                                },\n                                {\n                                    icon: 'delete-forever',\n                                    tooltip: 'Remove Everything',\n                                    isFreeAction: true,\n                                    onClick: (event, rowData) => {\n                                        setConfirmOpen(true)\n                                    }\n                                }\n                            ]}\n                            localization={{\n                                toolbar: {\n                                    exportName: 'Save new file'\n                                }\n                            }}\n                            detailPanel={rowData => {\n                                return (\n                                    <>\n                                        <p>URL: {rowData.url}</p>\n                                        <p>Duration: {rowData.duration}</p>\n                                    </>\n                                )\n                            }}\n                            editable={{\n                                isEditable: rowData => true,\n                                isDeletable: rowData => true,\n                                onRowAdd: onRowAdd,\n                                onRowUpdate: onRowUpdate,\n                                onRowDelete: onRowDelete\n                            }}\n                        />\n                    </Box>\n                )}\n\n            </Container>\n            <Dialog\n                open={confirmOpen}\n                onClose={handleConfirmClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\">\n                <DialogTitle id=\"alert-dialog-title\">Delete everything</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        This will delete everything and let you start afresh. Are your sure?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleConfirmClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleDeleteAll} color=\"primary\" autoFocus>\n                        Delete everything\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default M3U","import React from 'react'\nimport './App.css'\nimport { Box } from '@material-ui/core'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport M3U from './M3U'\n\nconst TabPanel = (props) => {\n    const { children, value, index, ...other } = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    )\n}\n\nconst App = () => {\n    const [value, setValue] = React.useState(0)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            </header>\n            <main>\n                <AppBar position=\"static\">\n                    <Tabs value={value} onChange={handleChange} aria-label=\"m3yoyo tabs\">\n                        <Tab label=\"m3u\"/>\n                    </Tabs>\n                </AppBar>\n                <TabPanel value={value} index={0}>\n                    <M3U/>\n                </TabPanel>\n            </main>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({\n    palette: {\n        primary: { main: '#3f51b5' },\n        secondary: { main: '#f50057' }\n    }\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport theme from './theme'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline/>\n        <ThemeProvider theme={theme}>\n            <App/>\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}