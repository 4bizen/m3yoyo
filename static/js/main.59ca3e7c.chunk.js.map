{"version":3,"sources":["LogoAutocomplete.js","App.js","serviceWorker.js","index.js"],"names":["renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","Provider","value","height","map","reduce","a","b","width","key","outerElementType","innerElementType","overscanCount","LogoAutocomplete","Autocomplete","freeSolo","id","disableClearable","disableListWrap","options","logos","getOptionLabel","option","url","renderOption","src","renderInput","params","TextField","label","variant","inputProps","autoComplete","App","fileReader","useState","hasFile","setHasFile","columns","setColumns","setData","useEffect","store","has","setupTableData","fileData","get","columnsSet","Set","add","dataArray","segments","forEach","segment","idx","inf","Object","keys","i","push","sort","delete","columnsArray","c","title","field","render","rowData","tvgLogo","editComponent","readFile","e","content","result","reader","M3U8FileParser","read","getResult","className","onChange","console","log","FileReader","onloadend","readAsText","acceptedFiles","filesLimit","dropzoneText","useChipsForPreview","padding","pageSize","draggable","pageSizeOptions","detailPanel","duration","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","Boolean","window","location","hostname","match","ReactDOM","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59ca3e7c.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport logos from './tvlogos.json'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport { useTheme } from '@material-ui/core/styles'\nimport { VariableSizeList } from 'react-window'\n\nconst LISTBOX_PADDING = 8 // px\n\nfunction renderRow(props) {\n    const { data, index, style } = props\n    return React.cloneElement(data[index], {\n        style: {\n            ...style,\n            top: style.top + LISTBOX_PADDING\n        }\n    })\n}\n\nconst OuterElementContext = React.createContext({})\n\nconst OuterElementType = React.forwardRef((props, ref) => {\n    const outerProps = React.useContext(OuterElementContext)\n    return <div ref={ref} {...props} {...outerProps} />\n})\n\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n    const { children, ...other } = props\n    const itemData = React.Children.toArray(children)\n    const theme = useTheme()\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true })\n    const itemCount = itemData.length\n    const itemSize = smUp ? 50 : 60\n\n    const getChildSize = (child) => {\n        if (React.isValidElement(child) && child.type === ListSubheader) {\n            return 48\n        }\n\n        return itemSize\n    }\n\n    const getHeight = () => {\n        if (itemCount > 8) {\n            return 8 * itemSize\n        }\n        return itemData.map(getChildSize).reduce((a, b) => a + b, 0)\n    }\n\n    return (\n        <div ref={ref}>\n            <OuterElementContext.Provider value={other}>\n                <VariableSizeList\n                    itemData={itemData}\n                    height={getHeight() + 2 * LISTBOX_PADDING}\n                    width=\"100%\"\n                    key={itemCount}\n                    outerElementType={OuterElementType}\n                    innerElementType=\"ul\"\n                    itemSize={(index) => getChildSize(itemData[index])}\n                    overscanCount={5}\n                    itemCount={itemCount}\n                >\n                    {renderRow}\n                </VariableSizeList>\n            </OuterElementContext.Provider>\n        </div>\n    )\n})\n\nconst LogoAutocomplete = () => {\n    return (\n        <Autocomplete\n            freeSolo\n            id=\"logo-select\"\n            disableClearable\n            disableListWrap\n            ListboxComponent={ListboxComponent}\n            options={logos}\n            getOptionLabel={(option) => option.url}\n            renderOption={(option) => <img src={option.url} style={{ width: 70 }}/>}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Choose a logo\"\n                    variant=\"outlined\"\n                    inputProps={{\n                        ...params.inputProps,\n                        autoComplete: 'new-password' // disable autocomplete and autofill\n                    }}\n                />\n            )}\n        />\n    )\n}\n\nexport default LogoAutocomplete","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { DropzoneArea } from 'material-ui-dropzone'\nimport M3U8FileParser from 'm3u8-file-parser'\nimport store from 'store2'\nimport MaterialTable from 'material-table'\nimport LogoAutocomplete from './LogoAutocomplete'\n\nconst App = () => {\n    let fileReader\n\n    const [hasFile, setHasFile] = useState(false)\n\n    const [columns, setColumns] = useState(null)\n    const [data, setData] = useState(null)\n\n    useEffect(() => {\n        if (store.has('m3uOriginal')) {\n            setHasFile(true)\n            setupTableData()\n        }\n    }, [])\n\n    const setupTableData = () => {\n        const fileData = store.get('m3uOriginal')\n        const columnsSet = new Set()\n        columnsSet.add('sort')\n        const dataArray = []\n        // console.log(flatten(m3uContent.segments))\n        fileData.segments.forEach((segment, idx) => {\n            if (segment.inf) {\n                Object.keys(segment.inf).forEach((i) => {\n                    columnsSet.add(i)\n                })\n            }\n            dataArray.push({\n                sort: idx,\n                url: segment.url,\n                ...segment.inf\n            })\n        })\n        columnsSet.delete('duration')\n        const columnsArray = []\n        columnsSet.forEach((c) => {\n            if (c === 'tvgLogo') {\n                columnsArray.push({\n                    title: c,\n                    field: c,\n                    render: rowData => <img src={rowData.tvgLogo} style={{ width: 70 }}/>,\n                    editComponent: () => <LogoAutocomplete/>\n                })\n            } else {\n                columnsArray.push({\n                    title: c,\n                    field: c\n                })\n            }\n\n        })\n        setColumns(columnsArray)\n        setData(dataArray)\n    }\n\n    const readFile = (e) => {\n        const content = fileReader.result\n        const reader = new M3U8FileParser()\n        reader.read(content)\n        const result = reader.getResult()\n        if (result) {\n            store('m3uOriginal', result)\n            setHasFile(true)\n            setupTableData()\n        }\n    }\n\n    const newFile = (e) => {\n        console.log(e)\n        fileReader = new FileReader()\n        fileReader.onloadend = readFile\n        fileReader.readAsText(e[0])\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {!hasFile && <DropzoneArea\n                    onChange={newFile}\n                    acceptedFiles={['audio/x-mpegurl', 'audio/mpegurl']}\n                    filesLimit={1}\n                    dropzoneText='To get started, add your playlist file here'\n                    useChipsForPreview={true}\n                />}\n            </header>\n            <main>\n                {columns && data && <MaterialTable\n                    title='Playlist'\n                    columns={columns}\n                    data={data}\n                    options={{\n                        padding: 'dense',\n                        pageSize: 100,\n                        draggable: false,\n                        pageSizeOptions: [20, 40, 60, 80, 100]\n                    }}\n                    detailPanel={rowData => {\n                        return (\n                            <>\n                                <p>URL: {rowData.url}</p>\n                                <p>Duration: {rowData.duration}</p>\n                            </>\n                        )\n                    }}\n                    editable={{\n                        onRowAdd: newData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    {\n                                        // const data = this.state.data;\n                                        // data.push(newData);\n                                        // this.setState({ data }, () => resolve());\n                                    }\n                                    resolve()\n                                }, 1000)\n                            }),\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    {\n                                        // const data = this.state.data;\n                                        // const index = data.indexOf(oldData);\n                                        // data[index] = newData;\n                                        // this.setState({ data }, () => resolve());\n                                    }\n                                    resolve()\n                                }, 1000)\n                            }),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    {\n                                        console.log(oldData.sort)\n                                        const newData = data\n\n                                        // const index = data.indexOf(oldData);\n                                        // data.splice(index, 1);\n                                        // setData({ data });\n                                        // resolve()\n                                    }\n                                    resolve()\n                                }, 100)\n                            })\n                    }}\n                />}\n            </main>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline/>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}